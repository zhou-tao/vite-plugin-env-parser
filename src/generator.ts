import { writeFileSync } from 'node:fs'
import { resolve } from 'node:path'

type DTS = string | boolean | undefined

type EnvValue = string | number | boolean

type Env = Record<string, EnvValue | EnvValue[]>

export function generateDTS(dts: DTS, root = process.cwd(), env: Env = {}) {
  if (!dts) return
  dts = dts === true ? 'env.d.ts' : dts
  const path = resolve(root, dts as string)
  const doWriteFileApi = writeFileSync
  doWriteFileApi(path, createDTSContent(env), 'utf-8')
}

export function createEnvCode(env: Env = {}) {
  let envCode = ''
  let exportKeys = ''
  for (const key in env) {
    exportKeys += `${key}, `
    const value = env[key]
    envCode += `
    export const ${key} = ${typeof value === 'string' ? JSON.stringify(value) : value}`
  }
  return `${envCode}
  
  export default { ${exportKeys.slice(0, -1)}}`
}

function createDTSContent(env: Env = {}): string {
  // TODO: resolve content by injectAtEnd
  const getType = (v: EnvValue | EnvValue[]) => `${typeof (Array.isArray(v) ? v[0] : v)}${Array.isArray(v) ? '[]' : ''}`
  const envContent = Object.entries(env).reduce((cur, [key, value]) => `${cur}
  readonly const ${key}: ${getType(value)}`, '')
  return `/* Generated by vite-plugin-env-parser */

declare interface 'vite-env' {${envContent}
}
`
}
