import { existsSync, writeFileSync, appendFileSync } from 'node:fs'
import { resolve } from 'node:path'

type DTS = boolean | string

type EnvValue = string | number | boolean

type ENV = Record<string, EnvValue | EnvValue[]>

export function generateDTS(dts: DTS, root = process.cwd(), env: ENV = {}, injectAtEnd = false) {
  if (dts === true) dts = './src/vite-env.d.ts'
  const path = resolve(root, dts as string)
  const inject = injectAtEnd && existsSync(path)
  const doWriteFileApi = inject ? appendFileSync : writeFileSync
  doWriteFileApi(path, createContent(env, injectAtEnd), 'utf-8')
}

function createContent(env: ENV, injectAtEnd: boolean): string {
  // TODO: resolve content by injectAtEnd
  const getType = (v: EnvValue | EnvValue[]) => `${typeof (Array.isArray(v) ? v[0] : v)}${Array.isArray(v) ? '[]' : ''}`
  const envContent = Object.entries(env).reduce((cur, [key, value]) => `${cur}
  readonly ${key}: ${getType(value)}`, '')
  return `/* Generated by vite-plugin-env-parser */
/// <reference types="vite/client" />

interface ImportMetaEnv {${envContent}
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
`
}
